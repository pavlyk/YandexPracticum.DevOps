cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку
   #JAVA_OPTS: -Xmx2500M
   #KUBERNETES_MEMORY_REQUEST: 2Gi


include:
  - template: Security/SAST.gitlab-ci.yml

stages:
   - build
   - test
   - release
   - deploy

build-backend-code-job:
   stage: build
   script:
      - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt
      - cd backend
      - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
      - cd .. 
      - mkdir sausage-store-${VERSION}
      - mv backend/target/sausage-store-${VERSION}.jar sausage-store-${VERSION}/sausage-store-${VERSION}.jar
   artifacts:
    paths:
      - ${CI_PROJECT_DIR}/.m2/
      - sausage-store-${VERSION}/sausage-store-${VERSION}.jar 
    reports:
      dotenv: CI_JOB_ID.txt
   rules: # rules и only в данных случаях взаимозаменяемы
      - changes:
           - backend/**/*


spotbugs-sast:
  stage: test
  dependencies:
    - build-backend-code-job
  variables:
    COMPILE: "false"


sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16 # тот самый docker-образ, о котором мы все узнаем в будущем
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - .sonar/cache
  script:
    - cd backend
    - >
      mvn verify sonar:sonar 
      -Dversion.application=${VERSION} 
      -Dsonar.qualitygate.wait=true 
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACK}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
  rules:
    - changes:
      - backend/**/*


release:
   stage: release
   script:
      - cd backend
      - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml
   rules:
      - changes:
           - backend/**/*



deploy:
  stage: deploy
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update && apt-get install -y openssh-client)'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - ssh ${DEV_USER}@${DEV_HOST} "export \"CURRENT_VERSION=${VERSION}\"; export \"VERSION=${VERSION}\"; export \"DEV_HOST=${DEV_HOST}\";export \"NEXUS_REPO_URL=${NEXUS_REPO_URL}\"; export \"NEXUS_REPO_USER=${NEXUS_REPO_USER}\"; export \"NEXUS_REPO_PASS=${NEXUS_REPO_PASS}\"; setsid /bin/bash -s" < ./backend/deploy.sh
  environment:
    name: backend/${CI_COMMIT_REF_SLUG}


slack-message: # уведомляем в Slack
  stage: .post
  script:
    - echo "Send notify to Slack"
    - >
      curl -X POST -H 'Content-type: application/json' --data "{\"blocks\":[{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Вышла новая версия сосисочной - ${VERSION}.\"}},{\"type\":\"section\",\"text\":{\"type\":\"mrkdwn\",\"text\":\"Backend: *<${NEXUS_REPO_URL}/sausage-store-pashkov-dmitriy-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar|Download :arrow-down:>*\"}},{\"type\":\"divider\"},{\"type\":\"context\",\"elements\":[{\"type\":\"mrkdwn\",\"text\":\":eyes: <@U03FRG969C6>\"}]}]}" https://hooks.slack.com/services/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
  when: on_success
